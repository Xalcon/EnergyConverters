buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'


version = version_major + '.' + version_minor + '.' + version_patch + '.' + getBuildNumber()
group = "net.xalcon.energyconverters" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "energyconverters_" + mcversion

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = mcversion + "-" + forgeversion
    runDir = "run"
    mappings = mcp_mappings
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    replace '@VERSION@', project.version
}

repositories {
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
    maven { url 'http://maven.epoxide.org' }
	maven {
		// location of the maven that hosts JEI files
		name = "Progwml6 maven"
		url = "http://dvs1.progwml6.com/files/maven"
	}
	maven { url = "http://maven.modmuss50.me/" }
}

dependencies {
    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    
    // If any of these dependencies are being marked as FAILED under "forgeGradleResovledDeobfProvided" run the "cleanCache" task.
    deobfProvided "net.industrial-craft:industrialcraft-2:${ic2_version}:api"
    deobfProvided "net.darkhax.tesla:Tesla:${tesla_version}"
	deobfProvided "mezz.jei:jei_${mcversion}:${jei_version}:api"
	
	
	deobfProvided("RebornCore:RebornCore-${mcversion}:${reborncore_version}:universal") {
		transitive = false
	}
	deobfProvided("TechReborn:TechReborn-${mcversion}:${techreborn_version}:universal") {
		transitive = false
	}
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

def getBuildNumber() {
    return "$System.env.BUILD_NUMBER" != "null" ? "$System.env.BUILD_NUMBER" : "0"
}
